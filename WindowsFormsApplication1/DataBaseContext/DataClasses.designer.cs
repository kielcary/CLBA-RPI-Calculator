#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApplication1.DataBaseContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CLBCalcs")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDivision(Division instance);
    partial void UpdateDivision(Division instance);
    partial void DeleteDivision(Division instance);
    partial void InsertUpload(Upload instance);
    partial void UpdateUpload(Upload instance);
    partial void DeleteUpload(Upload instance);
    partial void InsertLeague(League instance);
    partial void UpdateLeague(League instance);
    partial void DeleteLeague(League instance);
    partial void InsertOpponentsRecord(OpponentsRecord instance);
    partial void UpdateOpponentsRecord(OpponentsRecord instance);
    partial void DeleteOpponentsRecord(OpponentsRecord instance);
    partial void InsertRecord(Record instance);
    partial void UpdateRecord(Record instance);
    partial void DeleteRecord(Record instance);
    partial void InsertSeason(Season instance);
    partial void UpdateSeason(Season instance);
    partial void DeleteSeason(Season instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTeamCalculation(TeamCalculation instance);
    partial void UpdateTeamCalculation(TeamCalculation instance);
    partial void DeleteTeamCalculation(TeamCalculation instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::WindowsFormsApplication1.Properties.Settings.Default.CLBCalcsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Division> Divisions
		{
			get
			{
				return this.GetTable<Division>();
			}
		}
		
		public System.Data.Linq.Table<Upload> Uploads
		{
			get
			{
				return this.GetTable<Upload>();
			}
		}
		
		public System.Data.Linq.Table<League> Leagues
		{
			get
			{
				return this.GetTable<League>();
			}
		}
		
		public System.Data.Linq.Table<OpponentsRecord> OpponentsRecords
		{
			get
			{
				return this.GetTable<OpponentsRecord>();
			}
		}
		
		public System.Data.Linq.Table<Record> Records
		{
			get
			{
				return this.GetTable<Record>();
			}
		}
		
		public System.Data.Linq.Table<Season> Seasons
		{
			get
			{
				return this.GetTable<Season>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<TeamCalculation> TeamCalculations
		{
			get
			{
				return this.GetTable<TeamCalculation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Division")]
	public partial class Division : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DivisionID;
		
		private string _DivisionName;
		
		private EntitySet<Team> _Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDivisionIDChanging(int value);
    partial void OnDivisionIDChanged();
    partial void OnDivisionNameChanging(string value);
    partial void OnDivisionNameChanged();
    #endregion
		
		public Division()
		{
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DivisionID
		{
			get
			{
				return this._DivisionID;
			}
			set
			{
				if ((this._DivisionID != value))
				{
					this.OnDivisionIDChanging(value);
					this.SendPropertyChanging();
					this._DivisionID = value;
					this.SendPropertyChanged("DivisionID");
					this.OnDivisionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionName", DbType="VarChar(50)")]
		public string DivisionName
		{
			get
			{
				return this._DivisionName;
			}
			set
			{
				if ((this._DivisionName != value))
				{
					this.OnDivisionNameChanging(value);
					this.SendPropertyChanging();
					this._DivisionName = value;
					this.SendPropertyChanged("DivisionName");
					this.OnDivisionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Team", Storage="_Teams", ThisKey="DivisionID", OtherKey="Division")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Division1 = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Division1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Upload")]
	public partial class Upload : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UploadID;
		
		private System.DateTime _UploadDate;
		
		private System.DateTime _GameDate;
		
		private int _SeasonID;
		
		private EntitySet<TeamCalculation> _TeamCalculations;
		
		private EntityRef<Season> _Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUploadIDChanging(int value);
    partial void OnUploadIDChanged();
    partial void OnUploadDateChanging(System.DateTime value);
    partial void OnUploadDateChanged();
    partial void OnGameDateChanging(System.DateTime value);
    partial void OnGameDateChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    #endregion
		
		public Upload()
		{
			this._TeamCalculations = new EntitySet<TeamCalculation>(new Action<TeamCalculation>(this.attach_TeamCalculations), new Action<TeamCalculation>(this.detach_TeamCalculations));
			this._Season = default(EntityRef<Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UploadID
		{
			get
			{
				return this._UploadID;
			}
			set
			{
				if ((this._UploadID != value))
				{
					this.OnUploadIDChanging(value);
					this.SendPropertyChanging();
					this._UploadID = value;
					this.SendPropertyChanged("UploadID");
					this.OnUploadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadDate", DbType="DateTime NOT NULL")]
		public System.DateTime UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameDate", DbType="DateTime NOT NULL")]
		public System.DateTime GameDate
		{
			get
			{
				return this._GameDate;
			}
			set
			{
				if ((this._GameDate != value))
				{
					this.OnGameDateChanging(value);
					this.SendPropertyChanging();
					this._GameDate = value;
					this.SendPropertyChanged("GameDate");
					this.OnGameDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Upload_TeamCalculation", Storage="_TeamCalculations", ThisKey="UploadID", OtherKey="UploadID")]
		public EntitySet<TeamCalculation> TeamCalculations
		{
			get
			{
				return this._TeamCalculations;
			}
			set
			{
				this._TeamCalculations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Upload", Storage="_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.Uploads.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.Uploads.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamCalculations(TeamCalculation entity)
		{
			this.SendPropertyChanging();
			entity.Upload = this;
		}
		
		private void detach_TeamCalculations(TeamCalculation entity)
		{
			this.SendPropertyChanging();
			entity.Upload = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.League")]
	public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeagueID;
		
		private string _LeagueName;
		
		private EntitySet<Team> _Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnLeagueNameChanging(string value);
    partial void OnLeagueNameChanged();
    #endregion
		
		public League()
		{
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueName", DbType="VarChar(50)")]
		public string LeagueName
		{
			get
			{
				return this._LeagueName;
			}
			set
			{
				if ((this._LeagueName != value))
				{
					this.OnLeagueNameChanging(value);
					this.SendPropertyChanging();
					this._LeagueName = value;
					this.SendPropertyChanged("LeagueName");
					this.OnLeagueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Team", Storage="_Teams", ThisKey="LeagueID", OtherKey="League")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.League1 = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.League1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OpponentsRecord")]
	public partial class OpponentsRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OpponentsRecordID;
		
		private int _SeasonID;
		
		private int _TeamID;
		
		private int _OpponentTeamID;
		
		private int _WinsAgainst;
		
		private int _LossesAgainst;
		
		private System.DateTime _DateModified;
		
		private EntityRef<Season> _Season;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Team> _Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOpponentsRecordIDChanging(int value);
    partial void OnOpponentsRecordIDChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnOpponentTeamIDChanging(int value);
    partial void OnOpponentTeamIDChanged();
    partial void OnWinsAgainstChanging(int value);
    partial void OnWinsAgainstChanged();
    partial void OnLossesAgainstChanging(int value);
    partial void OnLossesAgainstChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public OpponentsRecord()
		{
			this._Season = default(EntityRef<Season>);
			this._Team = default(EntityRef<Team>);
			this._Team1 = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentsRecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OpponentsRecordID
		{
			get
			{
				return this._OpponentsRecordID;
			}
			set
			{
				if ((this._OpponentsRecordID != value))
				{
					this.OnOpponentsRecordIDChanging(value);
					this.SendPropertyChanging();
					this._OpponentsRecordID = value;
					this.SendPropertyChanged("OpponentsRecordID");
					this.OnOpponentsRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentTeamID", DbType="Int NOT NULL")]
		public int OpponentTeamID
		{
			get
			{
				return this._OpponentTeamID;
			}
			set
			{
				if ((this._OpponentTeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOpponentTeamIDChanging(value);
					this.SendPropertyChanging();
					this._OpponentTeamID = value;
					this.SendPropertyChanged("OpponentTeamID");
					this.OnOpponentTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinsAgainst", DbType="Int NOT NULL")]
		public int WinsAgainst
		{
			get
			{
				return this._WinsAgainst;
			}
			set
			{
				if ((this._WinsAgainst != value))
				{
					this.OnWinsAgainstChanging(value);
					this.SendPropertyChanging();
					this._WinsAgainst = value;
					this.SendPropertyChanged("WinsAgainst");
					this.OnWinsAgainstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LossesAgainst", DbType="Int NOT NULL")]
		public int LossesAgainst
		{
			get
			{
				return this._LossesAgainst;
			}
			set
			{
				if ((this._LossesAgainst != value))
				{
					this.OnLossesAgainstChanging(value);
					this.SendPropertyChanging();
					this._LossesAgainst = value;
					this.SendPropertyChanged("LossesAgainst");
					this.OnLossesAgainstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_OpponentsRecord", Storage="_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.OpponentsRecords.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.OpponentsRecords.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_OpponentsRecord", Storage="_Team", ThisKey="OpponentTeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.OpponentsRecords.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.OpponentsRecords.Add(this);
						this._OpponentTeamID = value.TeamID;
					}
					else
					{
						this._OpponentTeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_OpponentsRecord1", Storage="_Team1", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.OpponentsRecords1.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.OpponentsRecords1.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Record")]
	public partial class Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordID;
		
		private int _TeamID;
		
		private int _SeasonID;
		
		private int _Wins;
		
		private int _Losses;
		
		private System.DateTime _DateModified;
		
		private int _PythWins;
		
		private int _PythLosses;
		
		private EntityRef<Season> _Season;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnWinsChanging(int value);
    partial void OnWinsChanged();
    partial void OnLossesChanging(int value);
    partial void OnLossesChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    partial void OnPythWinsChanging(int value);
    partial void OnPythWinsChanged();
    partial void OnPythLossesChanging(int value);
    partial void OnPythLossesChanged();
    #endregion
		
		public Record()
		{
			this._Season = default(EntityRef<Season>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wins", DbType="Int NOT NULL")]
		public int Wins
		{
			get
			{
				return this._Wins;
			}
			set
			{
				if ((this._Wins != value))
				{
					this.OnWinsChanging(value);
					this.SendPropertyChanging();
					this._Wins = value;
					this.SendPropertyChanged("Wins");
					this.OnWinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Losses", DbType="Int NOT NULL")]
		public int Losses
		{
			get
			{
				return this._Losses;
			}
			set
			{
				if ((this._Losses != value))
				{
					this.OnLossesChanging(value);
					this.SendPropertyChanging();
					this._Losses = value;
					this.SendPropertyChanged("Losses");
					this.OnLossesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PythWins", DbType="Int NOT NULL")]
		public int PythWins
		{
			get
			{
				return this._PythWins;
			}
			set
			{
				if ((this._PythWins != value))
				{
					this.OnPythWinsChanging(value);
					this.SendPropertyChanging();
					this._PythWins = value;
					this.SendPropertyChanged("PythWins");
					this.OnPythWinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PythLosses", DbType="Int NOT NULL")]
		public int PythLosses
		{
			get
			{
				return this._PythLosses;
			}
			set
			{
				if ((this._PythLosses != value))
				{
					this.OnPythLossesChanging(value);
					this.SendPropertyChanging();
					this._PythLosses = value;
					this.SendPropertyChanged("PythLosses");
					this.OnPythLossesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Record", Storage="_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Record", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Season")]
	public partial class Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeasonID;
		
		private int _Year;
		
		private EntitySet<Upload> _Uploads;
		
		private EntitySet<OpponentsRecord> _OpponentsRecords;
		
		private EntitySet<Record> _Records;
		
		private EntitySet<TeamCalculation> _TeamCalculations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    #endregion
		
		public Season()
		{
			this._Uploads = new EntitySet<Upload>(new Action<Upload>(this.attach_Uploads), new Action<Upload>(this.detach_Uploads));
			this._OpponentsRecords = new EntitySet<OpponentsRecord>(new Action<OpponentsRecord>(this.attach_OpponentsRecords), new Action<OpponentsRecord>(this.detach_OpponentsRecords));
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			this._TeamCalculations = new EntitySet<TeamCalculation>(new Action<TeamCalculation>(this.attach_TeamCalculations), new Action<TeamCalculation>(this.detach_TeamCalculations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Upload", Storage="_Uploads", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<Upload> Uploads
		{
			get
			{
				return this._Uploads;
			}
			set
			{
				this._Uploads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_OpponentsRecord", Storage="_OpponentsRecords", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<OpponentsRecord> OpponentsRecords
		{
			get
			{
				return this._OpponentsRecords;
			}
			set
			{
				this._OpponentsRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Record", Storage="_Records", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_TeamCalculation", Storage="_TeamCalculations", ThisKey="SeasonID", OtherKey="SeasonID")]
		public EntitySet<TeamCalculation> TeamCalculations
		{
			get
			{
				return this._TeamCalculations;
			}
			set
			{
				this._TeamCalculations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Uploads(Upload entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_Uploads(Upload entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
		
		private void attach_OpponentsRecords(OpponentsRecord entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_OpponentsRecords(OpponentsRecord entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
		
		private void attach_TeamCalculations(TeamCalculation entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_TeamCalculations(TeamCalculation entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private string _TeamName;
		
		private int _League;
		
		private int _Division;
		
		private EntitySet<OpponentsRecord> _OpponentsRecords;
		
		private EntitySet<OpponentsRecord> _OpponentsRecords1;
		
		private EntitySet<Record> _Records;
		
		private EntitySet<TeamCalculation> _TeamCalculations;
		
		private EntityRef<Division> _Division1;
		
		private EntityRef<League> _League1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnLeagueChanging(int value);
    partial void OnLeagueChanged();
    partial void OnDivisionChanging(int value);
    partial void OnDivisionChanged();
    #endregion
		
		public Team()
		{
			this._OpponentsRecords = new EntitySet<OpponentsRecord>(new Action<OpponentsRecord>(this.attach_OpponentsRecords), new Action<OpponentsRecord>(this.detach_OpponentsRecords));
			this._OpponentsRecords1 = new EntitySet<OpponentsRecord>(new Action<OpponentsRecord>(this.attach_OpponentsRecords1), new Action<OpponentsRecord>(this.detach_OpponentsRecords1));
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			this._TeamCalculations = new EntitySet<TeamCalculation>(new Action<TeamCalculation>(this.attach_TeamCalculations), new Action<TeamCalculation>(this.detach_TeamCalculations));
			this._Division1 = default(EntityRef<Division>);
			this._League1 = default(EntityRef<League>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_League", DbType="Int NOT NULL")]
		public int League
		{
			get
			{
				return this._League;
			}
			set
			{
				if ((this._League != value))
				{
					if (this._League1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueChanging(value);
					this.SendPropertyChanging();
					this._League = value;
					this.SendPropertyChanged("League");
					this.OnLeagueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Division", DbType="Int NOT NULL")]
		public int Division
		{
			get
			{
				return this._Division;
			}
			set
			{
				if ((this._Division != value))
				{
					if (this._Division1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDivisionChanging(value);
					this.SendPropertyChanging();
					this._Division = value;
					this.SendPropertyChanged("Division");
					this.OnDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_OpponentsRecord", Storage="_OpponentsRecords", ThisKey="TeamID", OtherKey="OpponentTeamID")]
		public EntitySet<OpponentsRecord> OpponentsRecords
		{
			get
			{
				return this._OpponentsRecords;
			}
			set
			{
				this._OpponentsRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_OpponentsRecord1", Storage="_OpponentsRecords1", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<OpponentsRecord> OpponentsRecords1
		{
			get
			{
				return this._OpponentsRecords1;
			}
			set
			{
				this._OpponentsRecords1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Record", Storage="_Records", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamCalculation", Storage="_TeamCalculations", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<TeamCalculation> TeamCalculations
		{
			get
			{
				return this._TeamCalculations;
			}
			set
			{
				this._TeamCalculations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Team", Storage="_Division1", ThisKey="Division", OtherKey="DivisionID", IsForeignKey=true)]
		public Division Division1
		{
			get
			{
				return this._Division1.Entity;
			}
			set
			{
				Division previousValue = this._Division1.Entity;
				if (((previousValue != value) 
							|| (this._Division1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division1.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Division1.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._Division = value.DivisionID;
					}
					else
					{
						this._Division = default(int);
					}
					this.SendPropertyChanged("Division1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Team", Storage="_League1", ThisKey="League", OtherKey="LeagueID", IsForeignKey=true)]
		public League League1
		{
			get
			{
				return this._League1.Entity;
			}
			set
			{
				League previousValue = this._League1.Entity;
				if (((previousValue != value) 
							|| (this._League1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League1.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._League1.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._League = value.LeagueID;
					}
					else
					{
						this._League = default(int);
					}
					this.SendPropertyChanged("League1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OpponentsRecords(OpponentsRecord entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_OpponentsRecords(OpponentsRecord entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_OpponentsRecords1(OpponentsRecord entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_OpponentsRecords1(OpponentsRecord entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TeamCalculations(TeamCalculation entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamCalculations(TeamCalculation entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamCalculation")]
	public partial class TeamCalculation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamCalculationID;
		
		private int _UploadID;
		
		private int _SeasonID;
		
		private int _TeamID;
		
		private double _WP;
		
		private double _OWP;
		
		private double _OOWP;
		
		private double _SoS;
		
		private double _RPI;
		
		private System.DateTime _DateCreated;
		
		private double _PythWP;
		
		private double _PythOWP;
		
		private double _PythOOWP;
		
		private double _PythRPI;
		
		private EntityRef<Season> _Season;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Upload> _Upload;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamCalculationIDChanging(int value);
    partial void OnTeamCalculationIDChanged();
    partial void OnUploadIDChanging(int value);
    partial void OnUploadIDChanged();
    partial void OnSeasonIDChanging(int value);
    partial void OnSeasonIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnWPChanging(double value);
    partial void OnWPChanged();
    partial void OnOWPChanging(double value);
    partial void OnOWPChanged();
    partial void OnOOWPChanging(double value);
    partial void OnOOWPChanged();
    partial void OnSoSChanging(double value);
    partial void OnSoSChanged();
    partial void OnRPIChanging(double value);
    partial void OnRPIChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnPythWPChanging(double value);
    partial void OnPythWPChanged();
    partial void OnPythOWPChanging(double value);
    partial void OnPythOWPChanged();
    partial void OnPythOOWPChanging(double value);
    partial void OnPythOOWPChanged();
    partial void OnPythRPIChanging(double value);
    partial void OnPythRPIChanged();
    #endregion
		
		public TeamCalculation()
		{
			this._Season = default(EntityRef<Season>);
			this._Team = default(EntityRef<Team>);
			this._Upload = default(EntityRef<Upload>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamCalculationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamCalculationID
		{
			get
			{
				return this._TeamCalculationID;
			}
			set
			{
				if ((this._TeamCalculationID != value))
				{
					this.OnTeamCalculationIDChanging(value);
					this.SendPropertyChanging();
					this._TeamCalculationID = value;
					this.SendPropertyChanged("TeamCalculationID");
					this.OnTeamCalculationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadID", DbType="Int NOT NULL")]
		public int UploadID
		{
			get
			{
				return this._UploadID;
			}
			set
			{
				if ((this._UploadID != value))
				{
					if (this._Upload.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadIDChanging(value);
					this.SendPropertyChanging();
					this._UploadID = value;
					this.SendPropertyChanged("UploadID");
					this.OnUploadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonID", DbType="Int NOT NULL")]
		public int SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WP", DbType="Float NOT NULL")]
		public double WP
		{
			get
			{
				return this._WP;
			}
			set
			{
				if ((this._WP != value))
				{
					this.OnWPChanging(value);
					this.SendPropertyChanging();
					this._WP = value;
					this.SendPropertyChanged("WP");
					this.OnWPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OWP", DbType="Float NOT NULL")]
		public double OWP
		{
			get
			{
				return this._OWP;
			}
			set
			{
				if ((this._OWP != value))
				{
					this.OnOWPChanging(value);
					this.SendPropertyChanging();
					this._OWP = value;
					this.SendPropertyChanged("OWP");
					this.OnOWPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OOWP", DbType="Float NOT NULL")]
		public double OOWP
		{
			get
			{
				return this._OOWP;
			}
			set
			{
				if ((this._OOWP != value))
				{
					this.OnOOWPChanging(value);
					this.SendPropertyChanging();
					this._OOWP = value;
					this.SendPropertyChanged("OOWP");
					this.OnOOWPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoS", DbType="Float NOT NULL")]
		public double SoS
		{
			get
			{
				return this._SoS;
			}
			set
			{
				if ((this._SoS != value))
				{
					this.OnSoSChanging(value);
					this.SendPropertyChanging();
					this._SoS = value;
					this.SendPropertyChanged("SoS");
					this.OnSoSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RPI", DbType="Float NOT NULL")]
		public double RPI
		{
			get
			{
				return this._RPI;
			}
			set
			{
				if ((this._RPI != value))
				{
					this.OnRPIChanging(value);
					this.SendPropertyChanging();
					this._RPI = value;
					this.SendPropertyChanged("RPI");
					this.OnRPIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PythWP", DbType="Float NOT NULL")]
		public double PythWP
		{
			get
			{
				return this._PythWP;
			}
			set
			{
				if ((this._PythWP != value))
				{
					this.OnPythWPChanging(value);
					this.SendPropertyChanging();
					this._PythWP = value;
					this.SendPropertyChanged("PythWP");
					this.OnPythWPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PythOWP", DbType="Float NOT NULL")]
		public double PythOWP
		{
			get
			{
				return this._PythOWP;
			}
			set
			{
				if ((this._PythOWP != value))
				{
					this.OnPythOWPChanging(value);
					this.SendPropertyChanging();
					this._PythOWP = value;
					this.SendPropertyChanged("PythOWP");
					this.OnPythOWPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PythOOWP", DbType="Float NOT NULL")]
		public double PythOOWP
		{
			get
			{
				return this._PythOOWP;
			}
			set
			{
				if ((this._PythOOWP != value))
				{
					this.OnPythOOWPChanging(value);
					this.SendPropertyChanging();
					this._PythOOWP = value;
					this.SendPropertyChanged("PythOOWP");
					this.OnPythOOWPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PythRPI", DbType="Float NOT NULL")]
		public double PythRPI
		{
			get
			{
				return this._PythRPI;
			}
			set
			{
				if ((this._PythRPI != value))
				{
					this.OnPythRPIChanging(value);
					this.SendPropertyChanging();
					this._PythRPI = value;
					this.SendPropertyChanged("PythRPI");
					this.OnPythRPIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_TeamCalculation", Storage="_Season", ThisKey="SeasonID", OtherKey="SeasonID", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.TeamCalculations.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.TeamCalculations.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(int);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamCalculation", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamCalculations.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamCalculations.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Upload_TeamCalculation", Storage="_Upload", ThisKey="UploadID", OtherKey="UploadID", IsForeignKey=true)]
		public Upload Upload
		{
			get
			{
				return this._Upload.Entity;
			}
			set
			{
				Upload previousValue = this._Upload.Entity;
				if (((previousValue != value) 
							|| (this._Upload.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Upload.Entity = null;
						previousValue.TeamCalculations.Remove(this);
					}
					this._Upload.Entity = value;
					if ((value != null))
					{
						value.TeamCalculations.Add(this);
						this._UploadID = value.UploadID;
					}
					else
					{
						this._UploadID = default(int);
					}
					this.SendPropertyChanged("Upload");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
